// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(cuid())
  name        String   @unique
  logoUrl     String?  @map("logo_url")
  websiteUrl  String?  @map("website_url")
  description String?
  location    String?
  industry    String   @default("Technology")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  jobs Job[]

  @@map("companies")
}

model JobCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  jobs JobCategoryAssignment[]

  @@map("job_categories")
}

model Job {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  description     String?
  contentDocUrl   String?   @map("content_doc_url")
  salaryFrom      Int?      @map("salary_from")
  salaryTo        Int?      @map("salary_to")
  salaryCurrency  String    @default("PHP") @map("salary_currency")
  location        String?
  remoteType      String    @default("no") @map("remote_type") // "no", "hybrid", "full"
  jobType         String    @default("full-time") @map("job_type")
  experienceLevel String    @default("mid") @map("experience_level")
  requiredSkills  String[]  @map("required_skills")
  preferredSkills String[]  @map("preferred_skills")
  applyUrl        String?   @map("apply_url")
  applyEmail      String?   @map("apply_email")
  viewsCount      Int       @default(0) @map("views_count")
  isFeatured      Boolean   @default(false) @map("is_featured")
  status          String    @default("active") // "active", "closed", "draft"
  postedAt        DateTime  @default(now()) @map("posted_at")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  companyId  String  @map("company_id")
  company    Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  postedById String? @map("posted_by_id")
  postedBy   User?   @relation("PostedJobs", fields: [postedById], references: [id])

  categories   JobCategoryAssignment[]
  applications JobApplication[]

  @@map("jobs")
}

model JobCategoryAssignment {
  id         String      @id @default(cuid())
  jobId      String      @map("job_id")
  categoryId String      @map("category_id")
  createdAt  DateTime    @default(now()) @map("created_at")

  // Relations
  job      Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  category JobCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([jobId, categoryId])
  @@map("job_category_assignments")
}

model User {
  id           String    @id @default(cuid())
  uid          String?   @unique // Legacy UID from Google Sheets
  email        String    @unique
  fullName     String?   @map("full_name")
  nickname     String?
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  password     String
  age          Int?
  dateOfBirth  DateTime? @map("date_of_birth")
  fullAddress  String?   @map("full_address")
  role         String    @default("user") // "user", "admin", "recruiter"
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  postedJobs   Job[]            @relation("PostedJobs")
  applications JobApplication[]
  subscriptions UserSubscription[]
  credits      UserCredit[]
  transactions PaymentTransaction[]
  activities   UserActivity[]

  @@map("users")
}

model JobApplication {
  id          String   @id @default(cuid())
  jobId       String   @map("job_id")
  userId      String   @map("user_id")
  coverLetter String?  @map("cover_letter")
  resumeUrl   String?  @map("resume_url")
  status      String   @default("pending") // "pending", "reviewed", "accepted", "rejected"
  appliedAt   DateTime @default(now()) @map("applied_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
  @@map("job_applications")
}

// Subscription Models - Freemium Job Posting Site
model SubscriptionPlan {
  id                     String   @id @default(cuid())
  name                   String
  description            String?
  planType               String   @map("plan_type") // "free", "basic", "premium", "enterprise"
  priceMonthly           Decimal  @map("price_monthly")
  priceYearly            Decimal  @map("price_yearly")
  currency               String   @default("PHP")
  features               Json
  // Job posting limits
  maxJobPostings         Int      @default(0) @map("max_job_postings") // 0 = unlimited
  maxFeaturedJobs        Int      @default(0) @map("max_featured_jobs")
  // Resume access limits
  maxResumeViews         Int      @default(0) @map("max_resume_views") // 0 = unlimited
  maxDirectApplications  Int      @default(0) @map("max_direct_applications") // Monthly limit
  // AI feature limits
  maxAiCredits           Int      @default(0) @map("max_ai_credits") // 0 = unlimited
  maxAiJobMatches        Int      @default(0) @map("max_ai_job_matches")
  // Support and features
  prioritySupport        Boolean  @default(false) @map("priority_support")
  advancedAnalytics      Boolean  @default(false) @map("advanced_analytics")
  customBranding         Boolean  @default(false) @map("custom_branding")
  isActive               Boolean  @default(true) @map("is_active")
  trialDays              Int      @default(0) @map("trial_days")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  subscriptions UserSubscription[]
  subscriptionFeatures SubscriptionFeature[]

  @@map("subscription_plans")
}

model UserSubscription {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  planId               String    @map("plan_id")
  status               String    @default("active") // "active", "canceled", "expired", "trial"
  currentPeriodStart   DateTime  @map("current_period_start")
  currentPeriodEnd     DateTime  @map("current_period_end")
  trialEnd             DateTime? @map("trial_end")
  canceledAt           DateTime? @map("canceled_at")
  paymentMethodId      String?   @map("payment_method_id")
  // Usage tracking for current period
  usedJobPostings      Int       @default(0) @map("used_job_postings")
  usedFeaturedJobs     Int       @default(0) @map("used_featured_jobs")
  usedResumeViews      Int       @default(0) @map("used_resume_views")
  usedDirectApplications Int     @default(0) @map("used_direct_applications")
  usedAiCredits        Int       @default(0) @map("used_ai_credits")
  usedAiJobMatches     Int       @default(0) @map("used_ai_job_matches")
  // Reset tracking
  lastResetAt          DateTime? @map("last_reset_at")
  metadata             Json?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  user User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("user_subscriptions")
}

model UserCredit {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  creditType      String    @map("credit_type")
  balance         Int       @default(0)
  usedCredits     Int       @default(0) @map("used_credits")
  totalPurchased  Int       @default(0) @map("total_purchased")
  lastUsedAt      DateTime? @map("last_used_at")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, creditType])
  @@map("user_credits")
}

model CreditPackage {
  id           String  @id @default(cuid())
  name         String
  description  String?
  creditType   String  @map("credit_type") // "resume_contact", "ai_credit", "bundle", "job_posting"
  creditAmount Int     @map("credit_amount")
  price        Decimal
  currency     String  @default("PHP")
  bonusCredits Int     @default(0) @map("bonus_credits")
  // Bundle configuration
  bundleConfig Json?   @map("bundle_config") // For bundle packages
  // Add-on features
  isAddon      Boolean @default(false) @map("is_addon")
  addonFeatures Json?  @map("addon_features")
  // Validity
  validityDays Int?    @map("validity_days") // Credit expiry in days
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("credit_packages")
}

model PaymentTransaction {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  paymentIntentId  String    @map("payment_intent_id")
  amount           Decimal
  currency         String    @default("PHP")
  status           String    // "pending", "succeeded", "failed", "canceled"
  paymentMethod    String?   @map("payment_method") // "card", "gcash", "grab_pay", "paymaya", "bank_transfer"
  transactionType  String    @map("transaction_type") // "subscription", "credit_purchase", "addon", "bundle"
  relatedId        String?   @map("related_id") // subscription_id, credit_package_id, etc.
  metadata         Json?
  paymongoData     Json?     @map("paymongo_data")
  // Enhanced tracking
  description      String?
  receiptUrl       String?   @map("receipt_url")
  refundId         String?   @map("refund_id")
  refundedAt       DateTime? @map("refunded_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

model SubscriptionFeature {
  id           String  @id @default(cuid())
  planId       String  @map("plan_id")
  featureName  String  @map("feature_name")
  featureValue Json?   @map("feature_value")
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  plan SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("subscription_features")
}

model PricingTier {
  id           String  @id @default(cuid())
  name         String
  description  String?
  priceMonthly Decimal @map("price_monthly")
  priceYearly  Decimal? @map("price_yearly")
  currency     String  @default("PHP")
  features     Json
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("pricing_tiers")
}

// Track user activity for freemium limits
model UserActivity {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  activityType   String   @map("activity_type") // "resume_view", "direct_application", "ai_usage", "job_posting"
  activityData   Json?    @map("activity_data")
  creditsUsed    Int      @default(0) @map("credits_used")
  month          Int      // 1-12
  year           Int      // 2024, 2025, etc.
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityType, month, year])
  @@map("user_activities")
}
