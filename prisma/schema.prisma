// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(cuid())
  name        String   @unique
  logoUrl     String?  @map("logo_url")
  websiteUrl  String?  @map("website_url")
  description String?
  location    String?
  industry    String   @default("Technology")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  createdById String? @map("created_by_id")
  createdBy   User?   @relation("CreatedCompanies", fields: [createdById], references: [id])
  jobs Job[]
  reviews CompanyReview[]

  @@map("companies")
}

model JobCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  jobs JobCategoryAssignment[]

  @@map("job_categories")
}

model Job {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  description     String?
  requirements    String?   // Job requirements section
  benefits        String?   // Job benefits section
  contentDocUrl   String?   @map("content_doc_url")
  salaryFrom      Int?      @map("salary_from")
  salaryTo        Int?      @map("salary_to")
  salaryCurrency  String    @default("PHP") @map("salary_currency")
  location        String?
  remoteType      String    @default("no") @map("remote_type") // "no", "hybrid", "full"
  jobType         String    @default("full-time") @map("job_type")
  experienceLevel String    @default("mid") @map("experience_level")
  requiredSkills  String[]  @map("required_skills")
  preferredSkills String[]  @map("preferred_skills")
  applyUrl        String?   @map("apply_url")
  applyEmail      String?   @map("apply_email")
  viewsCount      Int       @default(0) @map("views_count")
  applicationsCount Int     @default(0) @map("applications_count")
  isFeatured      Boolean   @default(false) @map("is_featured")
  status          String    @default("active") // "active", "closed", "draft"
  postedAt        DateTime  @default(now()) @map("posted_at")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // New comprehensive job posting fields
  numberOfOpenings        Int?      @default(1) @map("number_of_openings")
  educationAttainment     String?   @map("education_attainment")
  employmentType          String?   @map("employment_type")
  industry                String?   @map("industry")
  subIndustry             String?   @map("sub_industry")
  
  // Location details
  city                    String?   @map("city")
  state                   String?   @map("state")
  postalCode              String?   @map("postal_code")
  country                 String?   @default("Philippines") @map("country")
  
  // Salary details
  salaryPeriod            String?   @map("salary_period") // "hourly", "daily", "monthly", "annually"
  salaryRange             String?   @map("salary_range") // Predefined ranges
  showCompensation        Boolean   @default(true) @map("show_compensation")
  
  // Application settings
  applicationMethod       String?   @default("internal") @map("application_method") // "internal", "external", "email"
  externalApplicationUrl  String?   @map("external_application_url")
  applicationEmail        String?   @map("application_email")
  applicationDeadline     DateTime? @map("application_deadline")
  
  // Contact settings
  showContactOnPosting    Boolean   @default(false) @map("show_contact_on_posting")
  protectEmailAddress     Boolean   @default(false) @map("protect_email_address")
  
  // Employer-specific fields
  licenseNumber           String?   @map("license_number")
  licenseExpirationDate   DateTime? @map("license_expiration_date")
  overseasStatement       String?   @map("overseas_statement")
  
  // Additional features
  allowPreview            Boolean   @default(true) @map("allow_preview")
  generateQRCode          Boolean   @default(false) @map("generate_qr_code")
  generateSocialTemplate  Boolean   @default(false) @map("generate_social_template")
  
  // Mode and employer type tracking
  mode                    String?   @map("mode") // "manual", "ai"
  employerType            String?   @map("employer_type")

  // Resume scanning criteria (embedded for quick access)
  skillsWeight            Int?      @default(30) @map("skills_weight")
  experienceWeight        Int?      @default(25) @map("experience_weight")
  educationWeight         Int?      @default(20) @map("education_weight")
  keywordWeight           Int?      @default(15) @map("keyword_weight")
  locationWeight          Int?      @default(10) @map("location_weight")
  minExperienceYears      Int?      @map("min_experience_years")
  requiredEducation       String?   @map("required_education")
  dealBreakers            String[]  @default([]) @map("deal_breakers")
  enableAIScanning        Boolean   @default(true) @map("enable_ai_scanning")

  // Relations
  companyId  String  @map("company_id")
  company    Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  postedById String? @map("posted_by_id")
  postedBy   User?   @relation("PostedJobs", fields: [postedById], references: [id])

  categories   JobCategoryAssignment[]
  applications JobApplication[]
  applicationForm ApplicationForm?
  
  // Resume scanning relations
  scanResults    ResumeScanResult[]
  jobMatches     ResumeJobMatch[]
  scanCriteria   JobScanCriteria?

  @@map("jobs")
}

model JobCategoryAssignment {
  id         String      @id @default(cuid())
  jobId      String      @map("job_id")
  categoryId String      @map("category_id")
  createdAt  DateTime    @default(now()) @map("created_at")

  // Relations
  job      Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  category JobCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([jobId, categoryId])
  @@map("job_category_assignments")
}

model ApplicationForm {
  id          String   @id @default(cuid())
  title       String
  description String?
  fields      String   // JSON string of form fields configuration
  jobId       String   @map("job_id")
  createdBy   String   @map("created_by")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  job          Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  creator      User             @relation("CreatedForms", fields: [createdBy], references: [id])
  applications JobApplication[]

  @@unique([jobId]) // One form per job
  @@map("application_forms")
}

model User {
  id           String    @id @default(cuid())
  uid          String?   @unique // Legacy UID from Google Sheets
  email        String    @unique
  fullName     String?   @map("full_name")
  name         String?   // Alias for fullName for compatibility
  companyName  String?   @map("company_name") // For hirers/employers
  nickname     String?
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  password     String
  age          Int?
  dateOfBirth  DateTime? @map("date_of_birth")
  fullAddress  String?   @map("full_address")
  location     String?   // Current location
  phone        String?   // Phone number
  
  // Professional Profile
  profilePicture String? @map("profile_picture")
  resumeUrl      String? @map("resume_url")
  skills         String[] @default([])
  
  // Enhanced Role System
  role         String    @default("job_seeker") // "super_admin", "employer_admin", "sub_user", "job_seeker"
  userType     String?   @map("user_type") // For sub-users: "staff", "hiring_manager", "vendor", "customer"
  employerType String?   @map("employer_type") // "local_direct", "local_pea", "local_do174", "local_psa", "local_government", "abroad_recruitment", "abroad_manning", "abroad_dmw"
  
  // Account Hierarchy
  parentUserId String?   @map("parent_user_id") // Reference to main employer account
  parentUser   User?     @relation("UserHierarchy", fields: [parentUserId], references: [id])
  subUsers     User[]    @relation("UserHierarchy")
  companyId    String?   @map("company_id") // Reference to company for sub-users
  
  // Access Control
  isActive     Boolean   @default(true) @map("is_active")
  accessLevel  Int       @default(1) @map("access_level") // 1-10 scale for granular permissions
  permissions  Json?     // Flexible permissions object
  
  // Credits and Limits (for sub-users, inherited from parent)
  allocatedResumeCredits  Int    @default(0) @map("allocated_resume_credits")
  allocatedAiCredits      Int    @default(0) @map("allocated_ai_credits")
  usedResumeCredits       Int    @default(0) @map("used_resume_credits")
  usedAiCredits           Int    @default(0) @map("used_ai_credits")
  
  // Privacy and Content Settings
  showSensitiveInfo Boolean @default(false) @map("show_sensitive_info")
  profileVisibility String  @default("public") @map("profile_visibility") // "public", "private", "premium_only"
  hideProfile      Boolean  @default(false) @map("hide_profile")
  contentMasking   Boolean  @default(false) @map("content_masking") // Premium feature to mask sensitive info
  
  // Notification Preferences
  emailNotifications    Boolean @default(true) @map("email_notifications")
  jobAlerts            Boolean @default(true) @map("job_alerts")
  resumeAlerts         Boolean @default(true) @map("resume_alerts")
  marketingEmails      Boolean @default(false) @map("marketing_emails")
  
  // Account Status
  accountStatus    String   @default("active") @map("account_status") // "active", "suspended", "expired", "pending"
  lastLoginAt      DateTime? @map("last_login_at")
  activationCode   String?  @map("activation_code") // For sub-user activation
  activatedAt      DateTime? @map("activated_at")
  
  // Email Verification
  emailVerificationToken String?  @map("email_verification_token")
  emailVerifiedAt        DateTime? @map("email_verified_at")
  
  // Password Reset
  passwordResetToken   String?   @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  
  // Two-Factor Authentication
  enableTwoFactor     Boolean @default(false) @map("enable_two_factor")
  twoFactorSecret     String? @map("two_factor_secret")
  twoFactorBackupCodes Json?  @map("two_factor_backup_codes")
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  postedJobs   Job[]            @relation("PostedJobs")
  applications JobApplication[]
  subscriptions UserSubscription[]
  credits      UserCredit[]
  transactions PaymentTransaction[]
  activities   UserActivity[]
  preferences  UserPreference?
  notificationSettings NotificationSetting?
  companyReviews CompanyReview[]
  reviewReports ReviewReport[]
  reviewVotes ReviewVote[]
  deletionRequests AccountDeletionRequest[]
  dataProcessingLogs DataProcessingLog[]
  
  // New Relations for Enhanced System
  managedUsers     UserManagement[] @relation("ManagedBy")
  managerOf        UserManagement[] @relation("ManagerOf")
  resumeExports    ResumeExport[]
  reminders        Reminder[]
  atsActivities    ATSActivity[]
  createdForms     ApplicationForm[] @relation("CreatedForms")
  conductedInterviews ATSInterview[] @relation("InterviewerRelation")
  createdCompanies Company[] @relation("CreatedCompanies")
  
  // Resume scanning relations
  parsedResumes    ParsedResume[]
  
  // Email system relations
  emailTemplates   EmailTemplate[]
  sentEmails       EmailLog[]
  statusChanges    ApplicationStatusHistory[]

  @@map("users")
}

model JobApplication {
  id             String    @id @default(cuid())
  jobId          String    @map("job_id")
  applicantId    String    @map("applicant_id")
  formId         String?   @map("form_id") // Reference to custom application form
  applicationData Json?    @map("application_data") // Form submission data
  fileData       Json?     @map("file_data") // Uploaded files info
  coverLetter    String?   @map("cover_letter")
  resumeUrl      String?   @map("resume_url")
  status         String    @default("pending") // "pending", "reviewed", "shortlisted", "interview_scheduled", "interviewed", "offered", "hired", "rejected", "withdrawn"
  stage          String    @default("new") // ATS workflow stages: "new", "reviewing", "shortlisted", "interview_scheduled", "interview_completed", "final_review", "offered", "hired", "rejected", "on_hold", "watchlist"
  priority       String    @default("normal") // "low", "normal", "high", "urgent"
  rating         Int?      // 1-5 star rating
  notes          String?   // Employer notes
  tags           String[]  @default([]) // Custom tags
  feedback       Json?     // Structured feedback data
  scheduledInterviews Json? @map("scheduled_interviews") // Interview scheduling data
  
  // ATS-specific fields
  isFavorite     Boolean   @default(false) @map("is_favorite")
  contactVisible Boolean   @default(true) @map("contact_visible") // Whether contact details are visible
  source         String?   @default("direct") // "direct", "referral", "job_board", "social", "agency"
  experienceYears Int?     @map("experience_years")
  salaryExpectation Decimal? @map("salary_expectation")
  availability   String?   // "immediate", "2_weeks", "1_month", "negotiable"
  
  appliedAt      DateTime  @default(now()) @map("applied_at")
  reviewedAt     DateTime? @map("reviewed_at")
  interviewedAt  DateTime? @map("interviewed_at")
  decidedAt      DateTime? @map("decided_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  job       Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicant User             @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  form      ApplicationForm? @relation(fields: [formId], references: [id])
  interviews ATSInterview[]
  
  // Resume scanning relations
  parsedResumes ParsedResume[]
  
  // Email system relations
  emailLogs     EmailLog[]
  statusHistory ApplicationStatusHistory[]

  @@unique([jobId, applicantId])
  @@map("job_applications")
}

// New model for interview scheduling
model ATSInterview {
  id              String    @id @default(cuid())
  applicationId   String    @map("application_id")
  interviewerId   String    @map("interviewer_id")
  type            String    // "phone", "video", "in_person", "panel"
  scheduledAt     DateTime  @map("scheduled_at")
  duration        Int       @default(60) // Duration in minutes
  location        String?   // Physical location or video link
  status          String    @default("scheduled") // "scheduled", "completed", "cancelled", "rescheduled"
  notes           String?   // Interviewer notes
  feedback        Json?     // Structured interview feedback
  score           Int?      // Interview score
  recordingUrl    String?   @map("recording_url")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  application JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interviewer User          @relation("InterviewerRelation", fields: [interviewerId], references: [id])

  @@map("ats_interviews")
}

// Subscription Models - Freemium Job Posting Site
model SubscriptionPlan {
  id                     String   @id @default(cuid())
  name                   String
  description            String?
  planType               String   @map("plan_type") // "free", "basic", "premium", "enterprise"
  priceMonthly           Decimal  @map("price_monthly")
  priceYearly            Decimal  @map("price_yearly")
  currency               String   @default("PHP")
  features               Json
  // Job posting limits
  maxJobPostings         Int      @default(0) @map("max_job_postings") // 0 = unlimited
  maxFeaturedJobs        Int      @default(0) @map("max_featured_jobs")
  // Resume access limits
  maxResumeViews         Int      @default(0) @map("max_resume_views") // 0 = unlimited
  maxDirectApplications  Int      @default(0) @map("max_direct_applications") // Monthly limit
  // AI feature limits
  maxAiCredits           Int      @default(0) @map("max_ai_credits") // 0 = unlimited
  maxAiJobMatches        Int      @default(0) @map("max_ai_job_matches")
  // Support and features
  prioritySupport        Boolean  @default(false) @map("priority_support")
  advancedAnalytics      Boolean  @default(false) @map("advanced_analytics")
  customBranding         Boolean  @default(false) @map("custom_branding")
  isActive               Boolean  @default(true) @map("is_active")
  trialDays              Int      @default(0) @map("trial_days")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relations
  subscriptions UserSubscription[]
  subscriptionFeatures SubscriptionFeature[]

  @@map("subscription_plans")
}

model UserSubscription {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  planId               String    @map("plan_id")
  status               String    @default("active") // "active", "canceled", "expired", "trial"
  currentPeriodStart   DateTime  @map("current_period_start")
  currentPeriodEnd     DateTime  @map("current_period_end")
  trialEnd             DateTime? @map("trial_end")
  canceledAt           DateTime? @map("canceled_at")
  paymentMethodId      String?   @map("payment_method_id")
  // Usage tracking for current period
  usedJobPostings      Int       @default(0) @map("used_job_postings")
  usedFeaturedJobs     Int       @default(0) @map("used_featured_jobs")
  usedResumeViews      Int       @default(0) @map("used_resume_views")
  usedDirectApplications Int     @default(0) @map("used_direct_applications")
  usedAiCredits        Int       @default(0) @map("used_ai_credits")
  usedAiJobMatches     Int       @default(0) @map("used_ai_job_matches")
  // Reset tracking
  lastResetAt          DateTime? @map("last_reset_at")
  metadata             Json?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  user User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("user_subscriptions")
}

model UserCredit {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  creditType      String    @map("credit_type")
  balance         Int       @default(0)
  usedCredits     Int       @default(0) @map("used_credits")
  totalPurchased  Int       @default(0) @map("total_purchased")
  lastUsedAt      DateTime? @map("last_used_at")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, creditType])
  @@map("user_credits")
}

model CreditPackage {
  id           String  @id @default(cuid())
  name         String
  description  String?
  creditType   String  @map("credit_type") // "resume_contact", "ai_credit", "bundle", "job_posting"
  creditAmount Int     @map("credit_amount")
  price        Decimal
  currency     String  @default("PHP")
  bonusCredits Int     @default(0) @map("bonus_credits")
  // Bundle configuration
  bundleConfig Json?   @map("bundle_config") // For bundle packages
  // Add-on features
  isAddon      Boolean @default(false) @map("is_addon")
  addonFeatures Json?  @map("addon_features")
  // Validity
  validityDays Int?    @map("validity_days") // Credit expiry in days
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("credit_packages")
}

model PaymentTransaction {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  paymentIntentId  String    @map("payment_intent_id")
  amount           Decimal
  currency         String    @default("PHP")
  status           String    // "pending", "succeeded", "failed", "canceled"
  paymentMethod    String?   @map("payment_method") // "card", "gcash", "grab_pay", "paymaya", "bank_transfer"
  transactionType  String    @map("transaction_type") // "subscription", "credit_purchase", "addon", "bundle"
  relatedId        String?   @map("related_id") // subscription_id, credit_package_id, etc.
  metadata         Json?
  paymongoData     Json?     @map("paymongo_data")
  // Enhanced tracking
  description      String?
  receiptUrl       String?   @map("receipt_url")
  refundId         String?   @map("refund_id")
  refundedAt       DateTime? @map("refunded_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

model SubscriptionFeature {
  id           String  @id @default(cuid())
  planId       String  @map("plan_id")
  featureName  String  @map("feature_name")
  featureValue Json?   @map("feature_value")
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  plan SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("subscription_features")
}

model PricingTier {
  id           String  @id @default(cuid())
  name         String
  description  String?
  priceMonthly Decimal @map("price_monthly")
  priceYearly  Decimal? @map("price_yearly")
  currency     String  @default("PHP")
  features     Json
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("pricing_tiers")
}

// Track user activity for freemium limits
model UserActivity {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  activityType   String   @map("activity_type") // "resume_view", "direct_application", "ai_usage", "job_posting"
  activityData   Json?    @map("activity_data")
  creditsUsed    Int      @default(0) @map("credits_used")
  month          Int      // 1-12
  year           Int      // 2024, 2025, etc.
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityType, month, year])
  @@map("user_activities")
}

// User Preferences Model
model UserPreference {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  
  // Job Alert Preferences
  jobAlertFrequency   String   @default("daily") @map("job_alert_frequency") // "instant", "daily", "weekly", "never"
  jobKeywords         String[] @map("job_keywords")
  jobLocations        String[] @map("job_locations")
  jobTypes            String[] @map("job_types") // "full-time", "part-time", "contract", "internship"
  experienceLevels    String[] @map("experience_levels") // "entry", "mid", "senior", "executive"
  salaryMin           Int?     @map("salary_min")
  salaryMax           Int?     @map("salary_max")
  remoteWork          Boolean? @map("remote_work")
  jobCategories       String[] @map("job_categories")
  
  // Privacy Preferences
  hideContactInfo     Boolean  @default(true) @map("hide_contact_info")
  hideEmail           Boolean  @default(true) @map("hide_email")
  hidePhone           Boolean  @default(true) @map("hide_phone")
  hideAddress         Boolean  @default(true) @map("hide_address")
  
  // Account Preferences
  accountStatus       String   @default("active") @map("account_status") // "active", "deactivated", "deleted"
  dataRetention       Boolean  @default(true) @map("data_retention")
  marketingOptIn      Boolean  @default(false) @map("marketing_opt_in")
  
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_preferences")
}

// Email Subscription Model
model EmailSubscription {
  id            String   @id @default(cuid())
  email         String   @unique
  userId        String?  @map("user_id")
  
  // Subscription Types
  jobAlerts     Boolean  @default(true) @map("job_alerts")
  resumeAlerts  Boolean  @default(true) @map("resume_alerts")
  newsletter    Boolean  @default(false)
  announcements Boolean  @default(true)
  
  // Metadata
  source        String?  // "signup", "job_application", "manual"
  isActive      Boolean  @default(true) @map("is_active")
  unsubscribeToken String? @unique @map("unsubscribe_token")
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("email_subscriptions")
}

// Notification Settings Model
model NotificationSetting {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  
  // Email Notifications
  emailJobAlerts        Boolean  @default(true) @map("email_job_alerts")
  emailResumeAlerts     Boolean  @default(true) @map("email_resume_alerts")
  emailApplications     Boolean  @default(true) @map("email_applications")
  emailMessages         Boolean  @default(true) @map("email_messages")
  emailAnnouncements    Boolean  @default(true) @map("email_announcements")
  emailMarketing        Boolean  @default(false) @map("email_marketing")
  
  // Push Notifications
  pushJobAlerts         Boolean  @default(true) @map("push_job_alerts")
  pushApplications      Boolean  @default(true) @map("push_applications")
  pushMessages          Boolean  @default(true) @map("push_messages")
  
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("notification_settings")
}

// Employer Feedback System
model CompanyReview {
  id                   String    @id @default(cuid())
  companyId            String    @map("company_id")
  userId               String    @map("user_id")
  
  // Ratings (1-5 stars)
  overallRating        Int       @map("overall_rating")
  compensationRating   Int       @map("compensation_rating")
  cultureRating        Int       @map("culture_rating")
  managementRating     Int       @map("management_rating")
  workLifeBalanceRating Int      @map("work_life_balance_rating")
  
  // Review Content
  title                String?
  comment              String?
  pros                 String?
  cons                 String?
  
  // Position Information
  position             String?
  employmentType       String?   @map("employment_type") // "full-time", "part-time", "contract", "internship"
  employmentStatus     String?   @map("employment_status") // "current", "former"
  workDuration         String?   @map("work_duration") // "less_than_1_year", "1-2_years", "3-5_years", "more_than_5_years"
  
  // Moderation
  status               String    @default("pending") // "pending", "approved", "rejected", "flagged"
  moderationNotes      String?   @map("moderation_notes")
  moderatedAt          DateTime? @map("moderated_at")
  moderatedBy          String?   @map("moderated_by")
  
  // Metadata
  isAnonymous          Boolean   @default(false) @map("is_anonymous")
  isVerified           Boolean   @default(false) @map("is_verified")
  helpfulVotes         Int       @default(0) @map("helpful_votes")
  reportCount          Int       @default(0) @map("report_count")
  ipAddress            String?   @map("ip_address")
  
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  company              Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports              ReviewReport[]
  votes                ReviewVote[]

  @@unique([companyId, userId])
  @@map("company_reviews")
}

model ReviewReport {
  id        String   @id @default(cuid())
  reviewId  String   @map("review_id")
  userId    String   @map("user_id")
  reason    String   // "spam", "inappropriate", "fake", "offensive", "other"
  details   String?
  status    String   @default("pending") // "pending", "resolved", "dismissed"
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  review    CompanyReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@map("review_reports")
}

model ReviewVote {
  id        String   @id @default(cuid())
  reviewId  String   @map("review_id")
  userId    String   @map("user_id")
  voteType  String   // "helpful", "not_helpful"
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  review    CompanyReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@map("review_votes")
}

// Account Deletion and Privacy Models
model AccountDeletionRequest {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  reason             String?   // "privacy", "not_useful", "found_job", "other"
  reasonDetails      String?   @map("reason_details")
  requestedAt        DateTime  @default(now()) @map("requested_at")
  processedAt        DateTime? @map("processed_at")
  status             String    @default("pending") // "pending", "approved", "completed", "cancelled"
  dataRetentionDays  Int       @default(30) @map("data_retention_days")
  finalDeletionDate  DateTime? @map("final_deletion_date")
  
  // Backup data before deletion
  backupData         Json?     @map("backup_data")
  
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_deletion_requests")
}

model DataProcessingLog {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  action        String   // "data_export", "data_deletion", "privacy_update", "deactivation"
  details       Json?
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_processing_logs")
}

// Enhanced User Management System Models
model UserManagement {
  id               String   @id @default(cuid())
  managerId        String   @map("manager_id")
  managedUserId    String   @map("managed_user_id")
  accessLevel      Int      @default(1) @map("access_level") // 1-10 scale
  permissions      Json?    // Specific permissions
  creditLimits     Json?    @map("credit_limits") // Resume and AI credit limits
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  manager          User     @relation("ManagerOf", fields: [managerId], references: [id], onDelete: Cascade)
  managedUser      User     @relation("ManagedBy", fields: [managedUserId], references: [id], onDelete: Cascade)

  @@unique([managerId, managedUserId])
  @@map("user_management")
}

model ResumeExport {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  exportedBy   String   @map("exported_by") // User who performed the export
  resumeData   Json     @map("resume_data") // Resume content
  format       String   // "pdf", "csv", "json"
  fileName     String   @map("file_name")
  fileSize     Int?     @map("file_size")
  downloadUrl  String?  @map("download_url")
  isShared     Boolean  @default(false) @map("is_shared")
  sharedWith   Json?    @map("shared_with") // Array of user IDs or emails
  expiresAt    DateTime? @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("resume_exports")
}

model Reminder {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  createdBy    String    @map("created_by") // Super admin who created it
  title        String
  message      String
  type         String    // "subscription_expiry", "credit_low", "account_inactive", "custom"
  priority     String    @default("medium") // "low", "medium", "high", "urgent"
  targetDate   DateTime? @map("target_date")
  isRead       Boolean   @default(false) @map("is_read")
  isArchived   Boolean   @default(false) @map("is_archived")
  metadata     Json?     // Additional reminder data
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model ATSActivity {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  activityType String   @map("activity_type") // "resume_view", "candidate_status_change", "interview_scheduled", etc.
  entityType   String   @map("entity_type") // "job_application", "candidate", "job_posting"
  entityId     String   @map("entity_id")
  description  String
  metadata     Json?    // Additional activity data
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ats_activities")
}

// Activity Log for detailed ATS tracking
model ActivityLog {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  action       String   // "candidate_updated", "bulk_move_stage", "interview_scheduled", etc.
  entityType   String   @map("entity_type") // "application", "candidate", "job", "interview"
  entityId     Int?     @map("entity_id") // ID of the affected entity
  details      Json?    // Detailed information about the action
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("activity_logs")
}

// Enhanced Subscription Plans for new user types
model SubscriptionAddon {
  id                String   @id @default(cuid())
  name              String
  description       String?
  type              String   // "resume_credits", "ai_credits", "sub_users", "features"
  value             Int      // Number of credits or features
  price             Decimal
  currency          String   @default("PHP")
  isActive          Boolean  @default(true) @map("is_active")
  requiredPlanTypes Json?    @map("required_plan_types") // Which plan types can purchase this
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  purchases         SubscriptionAddonPurchase[]

  @@map("subscription_addons")
}

model SubscriptionAddonPurchase {
  id             String            @id @default(cuid())
  userId         String            @map("user_id")
  addonId        String            @map("addon_id")
  quantity       Int               @default(1)
  totalPrice     Decimal           @map("total_price")
  status         String            @default("active") // "active", "consumed", "expired"
  expiresAt      DateTime?         @map("expires_at")
  purchasedAt    DateTime          @default(now()) @map("purchased_at")

  // Relations
  addon          SubscriptionAddon @relation(fields: [addonId], references: [id])

  @@map("subscription_addon_purchases")
}

// Resume Scanning and Parsing Models
model ParsedResume {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  applicationId     String?   @map("application_id") // Optional: linked to job application
  originalFileName  String    @map("original_file_name")
  fileUrl           String    @map("file_url")
  fileSize          Int       @map("file_size")
  fileType          String    @map("file_type") // "pdf", "doc", "docx", "txt"
  
  // Parsing service details
  parsingService    String    @default("resumeparser") @map("parsing_service") // "resumeparser", "sovren", "textkernel"
  parsingJobId      String?   @map("parsing_job_id") // External service job ID
  parsingStatus     String    @default("pending") @map("parsing_status") // "pending", "processing", "completed", "failed"
  parsingError      String?   @map("parsing_error")
  
  // Parsed data
  rawParsedData     Json?     @map("raw_parsed_data") // Full response from parsing service
  structuredData    Json?     @map("structured_data") // Cleaned and structured data
  
  // Extracted information
  personalInfo      Json?     @map("personal_info") // Name, email, phone, address
  summary           String?   @map("summary")
  experience        Json?     @map("experience") // Work experience array
  education         Json?     @map("education") // Education array
  skills            String[]  @map("skills")
  certifications    Json?     @map("certifications")
  languages         Json?     @map("languages")
  projects          Json?     @map("projects")
  awards            Json?     @map("awards")
  references        Json?     @map("references")
  
  // Calculated metrics
  totalExperienceYears Int?   @map("total_experience_years")
  experienceLevel      String? @map("experience_level") // "entry", "junior", "mid", "senior", "executive"
  
  // Quality scores
  resumeQualityScore   Int?    @map("resume_quality_score") // 0-100
  completenessScore    Int?    @map("completeness_score") // 0-100
  
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  application       JobApplication? @relation(fields: [applicationId], references: [id])
  scanResults       ResumeScanResult[]
  jobMatches        ResumeJobMatch[]

  @@map("parsed_resumes")
}

model ResumeScanResult {
  id                String    @id @default(cuid())
  resumeId          String    @map("resume_id")
  jobId             String    @map("job_id")
  scanType          String    @map("scan_type") // "manual", "ai", "quick"
  
  // Matching scores
  overallMatch      Int       @map("overall_match") // 0-100
  skillsMatch       Int       @map("skills_match") // 0-100
  experienceMatch   Int       @map("experience_match") // 0-100
  educationMatch    Int       @map("education_match") // 0-100
  keywordMatch      Int       @map("keyword_match") // 0-100
  
  // Detailed analysis
  matchedSkills     String[]  @map("matched_skills")
  missingSkills     String[]  @map("missing_skills")
  experienceGap     Int?      @map("experience_gap") // Years difference from requirement
  salaryFit         String?   @map("salary_fit") // "below", "within", "above"
  locationFit       Boolean?  @map("location_fit")
  
  // AI analysis
  aiRecommendation  String?   @map("ai_recommendation") // "recommend", "maybe", "reject"
  aiReasoning       String?   @map("ai_reasoning")
  aiKeyPoints       String[]  @map("ai_key_points")
  
  // Custom criteria scores
  customCriteria    Json?     @map("custom_criteria")
  
  scanDate          DateTime  @default(now()) @map("scan_date")
  scanSettings      Json?     @map("scan_settings") // Criteria weights, etc.

  // Relations
  resume            ParsedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  job               Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([resumeId, jobId])
  @@map("resume_scan_results")
}

model ResumeJobMatch {
  id                String    @id @default(cuid())
  resumeId          String    @map("resume_id")
  jobId             String    @map("job_id")
  matchScore        Int       @map("match_score") // 0-100
  matchRanking      Int       @map("match_ranking") // Position in ranked list
  isRecommended     Boolean   @default(false) @map("is_recommended")
  
  // Match breakdown
  skillCompatibility    Int   @map("skill_compatibility") // 0-100
  experienceCompatibility Int @map("experience_compatibility") // 0-100
  educationCompatibility  Int @map("education_compatibility") // 0-100
  locationCompatibility   Int @map("location_compatibility") // 0-100
  salaryCompatibility     Int @map("salary_compatibility") // 0-100
  
  // Details
  matchedRequirements   String[] @map("matched_requirements")
  missingRequirements   String[] @map("missing_requirements")
  additionalSkills      String[] @map("additional_skills")
  
  calculatedAt      DateTime  @default(now()) @map("calculated_at")
  isActive          Boolean   @default(true) @map("is_active")

  // Relations
  resume            ParsedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  job               Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([resumeId, jobId])
  @@map("resume_job_matches")
}

model JobScanCriteria {
  id                String    @id @default(cuid())
  jobId             String    @map("job_id")
  
  // Scanning weights and criteria
  skillsWeight      Int       @default(30) @map("skills_weight") // 0-100%
  experienceWeight  Int       @default(25) @map("experience_weight")
  educationWeight   Int       @default(20) @map("education_weight")
  keywordWeight     Int       @default(15) @map("keyword_weight")
  locationWeight    Int       @default(10) @map("location_weight")
  
  // Minimum requirements
  minExperienceYears Int?     @map("min_experience_years")
  requiredEducation  String?  @map("required_education")
  mustHaveSkills     String[] @map("must_have_skills")
  niceToHaveSkills   String[] @map("nice_to_have_skills")
  dealBreakers       String[] @map("deal_breakers")
  
  // Custom keywords for scanning
  keywordPhrases     String[] @map("keyword_phrases")
  excludeKeywords    String[] @map("exclude_keywords")
  
  // AI settings
  enableAIScanning   Boolean  @default(true) @map("enable_ai_scanning")
  aiModel            String?  @default("gpt-4") @map("ai_model")
  customPrompt       String?  @map("custom_prompt")
  
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  job                Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId])
  @@map("job_scan_criteria")
}

// Email template management
model EmailTemplate {
  id          String   @id @default(cuid())
  userId      String   @map("user_id") // User who customized this template
  templateId  String   @map("template_id") // Built-in template identifier
  subject     String?  // Custom subject line
  content     String   // Custom HTML content
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
  @@map("email_templates")
}

// Email logging for tracking and compliance
model EmailLog {
  id              String    @id @default(cuid())
  templateId      String    @map("template_id")
  recipientEmail  String    @map("recipient_email")
  subject         String
  content         String
  sentBy          String    @map("sent_by")
  applicationId   String?   @map("application_id")
  status          String    @default("pending") // "pending", "sent", "failed", "bounced"
  errorMessage    String?   @map("error_message")
  sentAt          DateTime? @map("sent_at")
  deliveredAt     DateTime? @map("delivered_at")
  openedAt        DateTime? @map("opened_at")
  clickedAt       DateTime? @map("clicked_at")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  sender          User             @relation(fields: [sentBy], references: [id])
  application     JobApplication?  @relation(fields: [applicationId], references: [id])

  @@map("email_logs")
}

// Application status history for tracking changes
model ApplicationStatusHistory {
  id            String   @id @default(cuid())
  applicationId String   @map("application_id")
  status        String   // New status
  changedBy     String   @map("changed_by")
  notes         String?  // Optional notes about the change
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  application   JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  changedByUser User           @relation(fields: [changedBy], references: [id])

  @@map("application_status_history")
}
